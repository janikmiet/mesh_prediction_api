# ansible-playbook -i "server.ip.adress," installation.yml --check
# this config is set by user 'ubuntu' with sudo credentials

---

- hosts: localhost
  connection: local
  user: ubuntu
  become: true
  tasks:
    - name: Run the equivalent of "apt-get update" as a separate step
      apt:
        update_cache: yes
    - name: "Edit bashrc"
      lineinfile:
        path: .bashrc
        line: force_color_prompt=yes
      lineinfile:
        path: .bashrc
        line: PS1='\[\033[1;36m\]\u\[\033[1;31m\]@\[\033[1;32m\]\h:\[\033[1;35m\]\w\[\033[1;31m\]\$\[\033[0m\] '
    - name: "Create directories"
      file:
        path: "{{ item }}"
        state: directory
        mode: '0755'
      with_items:
        - /home/ubuntu/mesh_prediction_api/PubMed_daily
        - /home/ubuntu/backups/
#    - name: "Copy large files from ..." # TODO where to download
#      copy:
#        src: "{{ item }}"
#        dest: /home/ubuntu/
#      with_items:
#        - bert_best_finetuned.h5
#        - neuro2.tar.gz 
#        - PubMed_daily-2020_02_25.tar.gz
#    - name: "Extract neuro2.db"
#      unarchive: 
#        src: "/home/ubuntu/mesh_prediction_api/neuro2.tar.gz"
#        dest: "/home/ubuntu/mesh_prediction_api/" 
#        remote_src: yes
#    - name: "Extract PubMed_daily"
#      unarchive:
#        src: "/home/ubuntu/mesh_prediction_api/PubMed_daily-2020_02_25.tar.gz"
#        dest: "/home/ubuntu/mesh_prediction_api/PubMed_daily/"  
#        remote_src: yes
    - name: "Install packages"
      apt:
        pkg: 
          - python3-dev 
          - python3-pip 
          - mariadb-server 
          - git 
          - sshfs 
          - sqlite
          - python
    - name: "Install virtualenv for python"
      pip:
        name: virtualenv
        extra_args: -U
    - name: "Edit /mesh_prediction_api/daily_update.sh"
      lineinfile:
        path: /home/ubuntu/mesh_prediction_api/daily_update.sh
        regexp: "/change/me"
        line: "base_folder=/home/ubuntu/mesh_prediction_api/PubMed_daily/" ## TODO
    - name: "Make shell/daily_update.sh runable"
      file: dest=/home/ubuntu/mesh_prediction_api/shell/daily_update.sh mode=a+x
    - name: "Make shell/start_predicting.sh runable"
      file: dest=/home/ubuntu/mesh_prediction_api/shell/start_predicting.sh mode=a+x
    - name: "Make shell/backup_db-pubmed.sh runable"
      file: dest=/home/ubuntu/mesh_prediction_api/shell/backup_db-pubmed.sh mode=a+x
    - name: "Create a new virtual environment at /home/ubuntu/mesh_prediction_api"
      command: virtualenv --system-site-packages -p python3 /home/ubuntu/mesh_prediction_api
    - name: "Install python packages at virtual environment"
      pip:
        name: 
          - tensorflow==1.14
          - keras
          - keras_metrics
          - keras_bert
          - lxml
          - tqdm
          - flask
          - gunicorn
        virtualenv: /home/ubuntu/mesh_prediction_api
    - name: "Copy api_service.sh to /usr/bin/api_service.sh"
      copy:
        src: shell/api_service.sh
        dest: /usr/bin/api_service.sh
        owner: ubuntu
        group: ubuntu
        mode: a+x
    - name: "Copy apiservice.service to /etc/systemd/system/apiservice.service"
      copy:
        src: shell/apiservice.service
        dest: /etc/systemd/system/apiservice.service
        owner: ubuntu
        group: ubuntu
        mode: 644
    - name: "Crontab jobs"
      cron:
        name: Parsing
        weekday: "5"
        minute: "5"
        hour: "1"
        user: ubuntu
        job: "/home/ubuntu/mesh_prediction_api/shell/daily_update.sh"
        #cron_file: pubmed_api_parsing
      cron:
        name: Predicting
        weekday: "6"
        minute: "5"
        hour: "1"
        user: ubuntu
        env: yes
        job: "/home/ubuntu/mesh_prediction_api/shell/start_predicting.sh"
        #cron_file: pubmed_api_predicting
      cron:
        name: Backups
        weekday: "4"
        minute: "5"
        hour: "1"
        user: ubuntu
        env: yes
        job: "/home/ubuntu/mesh_prediction_api/shell/backup_db-pubmed.sh"
    - name: "Start API service"
      command: systemctl start apiservice
    - name: "Enable API service on startup"
      command: systemctl enable apiservice

        
